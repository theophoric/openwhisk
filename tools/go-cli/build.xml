<!-- vim: set expandtab ts=4 sw=4 : -->

<!-- targets in this file should be called from the parent directory -->
<project basedir="../..">
    <import file="../../config/config.xml" />

    <target name="buildGoCLI" >

        <!-- load properties -->
        <var file="whisk.properties" />
        <property name="go-cli.src.dir" value="${openwhisk.dir}/tools/go-cli" />

        <!-- set arch and os -->
        <!-- valid options and combinations: https://golang.org/doc/install/source#environment -->
        <!-- TODO :: set arch properly -->
        <property name="go-cli.build.arch" value="amd64"/>
        <!-- TODO :: set for linux, freebsd, netbsd, openbsd, solaris -->
        <condition property="go-cli.build.os" value="darwin">
          <os family="mac"/>
        </condition>
        <condition property="go-cli.build.os" value="windows">
          <os family="windows"/>
        </condition>

        <!-- add the deploy keys to ssh-agent -->
        <exec executable="ssh-agent" failonerror="true" />
        <exec executable="ssh-add" failonerror="true">
          <arg line="-t 60" />
          <arg line="${go-cli.src.dir}/id_rsa_client"/>
          <arg line="${go-cli.src.dir}/id_rsa_cli"/>
        </exec>

        <!-- make the build directory -->
        <mkdir dir="${go-cli.build.dir}" />
        <copy file="${go-cli.src.dir}/Dockerfile" todir="${go-cli.build.dir}" />

        <!-- clone go-whisk and go-whisk-cli to build directory -->
        <exec executable="git" failonerror="true">
          <arg line="clone"/>
          <arg line="git@github.ibm.com:BlueMix-Fabric/go-whisk.git"/>
          <arg line="${go-cli.build.dir}/go-whisk" />
        </exec>
        <exec executable="git" failonerror="true">
          <arg line="clone"/>
          <arg line="git@github.ibm.com:BlueMix-Fabric/go-whisk-cli.git"/>
          <arg line="${go-cli.build.dir}/go-whisk-cli" />
        </exec>

        <!-- build docker image -->
        <exec executable="/bin/bash" failonerror="true">
            <arg line="${openwhisk.dir}/tools/docker/dockerWithRetry.sh ${docker.timeout.long}" />
            <arg line="build -t whisk/cli --build-arg GOOS=${go-cli.build.os} --build-arg GOARCH=${go-cli.build.arch} ${go-cli.build.dir}" />
        </exec>
        <exec executable="docker" failonerror="false" output="/dev/null" error="/dev/null">
            <arg line="${docker.tls.cmd}" />
            <arg line="rm -f cli" />
        </exec>
        <exec executable="docker" failonerror="true">
            <arg line="${docker.tls.cmd}" />
            <arg line="run -d --name cli whisk/cli" />
        </exec>

        <!-- copy binary into open/bin -->
        <delete dir="${openwhisk.dir}/bin/wsk" failonerror="false"/>
        <exec executable="docker" failonerror="true">
            <arg line="${docker.tls.cmd}" />
            <arg line="cp cli:/go/bin/wsk '${openwhisk.dir}/bin'" />
        </exec>
        <exec executable="docker" failonerror="false">
            <arg line="${docker.tls.cmd}" />
            <arg line="rm -f cli" />
        </exec>
    </target>

</project>
